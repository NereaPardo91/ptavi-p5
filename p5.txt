 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
	954
 ** ¿Cuánto tiempo dura la captura?
	56,149345s
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? 
	192.168.1.34
    ¿Se trata de una IP pública o de una IP privada?
    	Privada
    ¿Por qué lo sabes?
	Por que se encuentra dentro del rango de IP's privadas 192.168.0.0/192.168.255.255

3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? 
	UDP con un 96.2% frente al 2.1% de TCP
    ¿Es esto consistente con una aplicación que transmite en tiempo real?
	Si
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
	Ethernet, IPv4, UDP, STUN, SIP, RTP, H.261, RTCP, DNS, TCP, HTP, ICMP, ARP

4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
	7, 14, 16, 38, 39, 55
 ** Y los paquetes con RTP, ¿cuándo se envían?
	Empieza en el segundo 16 y finaliza en el 22 y vuelve a comenzar en 22 para acabar en el 38

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
	DNS
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
	80.58.61.250
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
	86.64.162.35
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
	Por que es la inversa de 86.64.162.35. 

6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
     Miramos en la trama HTTP GET
	request-URI:
	http://ekiga.net/ip/
 ** ¿Qué user agent (UA) la está pidiendo?
	Host:
	Ekiga
 ** ¿Qué devuelve el servidor?
     Miramos en la trama HTTP /1.1 200 OK (text/html)
	Line-based
	83.36.48.212
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? 
	La IP pública de nuestro ordenar
    ¿Qué es, entonces, lo que está respondiendo el servidor?
	Su IP pública para que pueda comunicarse.


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
	Es un protocolo de red del tipo cliente/servidor que permite a clientes NAT encontrar su dirección IP pública, el tipo de NAT en el que se encuentra y el puerto de Internet asociado con el puerto 		local a través de NAT. Esta información es usada para configurar una comunicación UDP entre dos hosts que se encuentren tras enrutadores NAT.
	En nuestra captura se hace uso de este protocolo para averiguar la IP publica de la maquina con dirección privada.
 ** ¿Estamos tras un NAT?
	Si, ya que la IP 192.168.1.34 pertenece a la red privada.
	

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
	Mirando en Destination: 86.64.162.85
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
	Mirando en User Datagram Protocol:
		Destination Port: 5060
 ** ¿Qué método SIP utiliza el UA para registrarse?
	Mirando en Session Initiation Protocol:
		Request Line:
		Method: REGISTER
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
	Mirando en Session Initiation Protocol:
		Message Header:
		Allow: INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
	No, el servidor responde con un 401, Unauthorized
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
	Con una respuesta del servidor 200 OK
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
	El primer intento el paquete tiene un tamaño de 523 bytes y el segundo de 712 bytes. Esto se debe a que en el segundo intento se incluye la linea Authorization
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
	Mirando en Session Initiation Protocol:
		Message Header:
		Expires: 3600s

10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
	Si, en Session Initiation Protocol:
		Message Header:
		From: Gregorio Robles, sip:grex@ekiga.net
 ** ¿Qué es lo que contiene el cuerpo de la trama? 
	Mirando Session Initiation Protocol:
		Message Body: 
		Aqui vemos que contiene campos de nombre de sesion, Creador, Informacion de Conexion...
    ¿En qué formato/protocolo está?
	Mirando Session Initiation Protocol:
		Message Body: SDP
 ** ¿Tiene éxito el primer intento?
	No
    ¿Cómo lo sabes?
	Por que el servidor le envia una trama requiriendo autenticacion (407 Proxy Authentication Required)
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? 
	En el tamaño, el primer INVITE tiene 982 bytes y el segundo INVITE tiene 1181 bytes
    ¿A qué crees que se debe esto?
	A que en el segundo INVITE en Session Initiation Protocol:
		Message Header: se añade el campo,
		Proxy-Authorization: campo necesario para establecer la conexion

11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
	RTP: transmision de informacion en tiempo real
	H.261: compresion de audio y video
	RTCP: informacion de control de sobre una trama RTP
	ARP: averigua la direccion fisica (hardware) de una maquina
 ** ¿Cuál es el tamaño de paquete de los mismos?
	RTP: 214 bytes
	H.261: Va variando, 1000, 1011, 1052... [bytes]
	RTCP: 43 bytes
	ARP: 60 bytes
 ** ¿Se utilizan bits de padding?
	Mirando en Real Time Protocol
		Padding = False
	No, se utilizan
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
	Estamos midiendo nuestro time en bytes --> Payload = 160 bytes
	Viendo el valor de delta entre nuestros paquetes vemos que la velocidad de transmision es de 64kbps
	Entonces podemos calcular el numero de paquetes que enviamos --> 64000/(160x8) = 50 paquetes, a una velocidad de 1280bps 
 ** ¿Cuántos bits/segundo estamos enviando?
	1280bps
[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? 
	Existen 2 flujos
    ¿por qué?
	1 flujo: en el puerto 5014, codificacion H.261, VIDEO
	1 flujo: en el puerto 5010, codificacion g.711A, AUDIO
 ** ¿Cuántos paquetes se pierden?
	Ninguno, en el campo lost en ambos flujos pone 0.0%
 ** ¿Cuál es el valor máximo del delta?
	Para el flujo 1, VIDEO, (H.261) --> Maximo = 1290.48ms
	Para el flujo 2, AUDIO, (g.711A) --> Maximo = 1290.44ms
    ¿Y qué es lo que significa el valor de delta?
	Tiempo máximo entre un paquete y el anterior
 ** ¿Cuáles son los valores de jitter (medio y máximo)? 
	Para el flujo 1, VIDEO, (H.261) --> Medio = 153.24ms
				            Maximo = 183.10ms
	Para el flujo 2, AUDIO, (g.711A) --> Medio = 42.50ms
				             Maximo = 119.64ms
    ¿Qué quiere decir eso? 
	Variaciones del retardo entre los paquetes
    ¿Estamos ante una conversación de calidad?
	Si, ya que el jitter medio en AUDIO no debe superar los 100ms y en nuestro caso son 42.50ms


13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
	Elijo mi primer paquete de AUDIO RTP. En Stream Analysis nos fijamos en los campos:
		Delta(ms) = 0.00
		Jitter(ms) = 0.00
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
	Si, por el valor de Marker que esta señalado entonces nos indica que es el primer paquete enviado
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
	Hasta el paquete 246 los valores de jitter son menores de 10ms en el 247 ya hay un jitter de 38.82
 ** ¿A qué se debe el cambio tan brusco del jitter?
	Al cambio tan brusco que sufre tambien Delta (tiempo maximo entre un paquete y el anterior)
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? 
	Si
    ¿Por qué?
	Por que el jitter va en relacion a la delta, entonces a un aumento considerable de delta el jitter tambien sufre un aumento considerable
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
	Lo que pueda variar el retardo en nuestra llegada de paquetes

14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
	Comienza el el segundo 14.426793 y finaliza en el segundo 39.229683, TIEMPO TOTAL CONVERSACIÓN: 24.80 segundos
 ** ¿Cuáles son sus SSRC?
	En nuestra trama RTP (eligo la primera) en REAL-Time Transport Protocol
			Synchronization Source Identifier : 0xbf4afd37
	En nuestra trama H.261 (eligo la primera) en Real-Time Transport Protocol
			Synchronization Source Identifier : 0x43306582
    ¿Por qué hay varios SSRCs? 
	Uno para el audio y otro para el video
    ¿Hay CSRCs?
	En la trama RTP en Real-Time Transport Protocol
		Contributing Source identifiers count: 0
	No hay CSRCS
	En la trama H.261 en Real-Time Transport Protocol
		Contributing Source identifiers count: 0
	No hay CSRCS

15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
	BYE
 ** ¿En qué trama(s)?
	924, 925, 927 y 933
 ** ¿Por qué crees que se envía varias veces?
	Porque hasta la trama 938 no se recibe un mensaje 200 OK. Esto se debe a que UDP es un protocolo no fiable y se retransmiten las tramas para asegurar que el paquete llega a su destino.

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
	Por que el cliente le envia un REGISTER con el campo Expires a 0 para que le borre de la sesion
 ** ¿En qué trama sucede esto?
	En las tramas 950 y 952
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
	En el campo Expires, al principio es 3600 y al final 0


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 ** ¿Son diferentes el registro y la descripción de la sesión?


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 ** ¿Cuál es su periodicidad?
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
